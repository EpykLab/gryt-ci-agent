---
# Docker installation and configuration tasks

- name: Remove old Docker packages
  apt:
    name:
      - docker
      - docker-engine
      - docker.io
      - containerd
      - runc
    state: absent
  tags: [docker]

- name: Install Docker prerequisites
  apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
  tags: [docker]

- name: Create Docker keyring directory
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  tags: [docker]

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    keyring: /etc/apt/keyrings/docker.gpg
    state: present
  tags: [docker]

- name: Get DEB architecture
  command: dpkg --print-architecture
  register: deb_architecture
  changed_when: false
  tags: [docker]

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch={{ deb_architecture.stdout }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
    update_cache: true
  tags: [docker]

- name: Install Docker Engine
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: true
  tags: [docker]

- name: Ensure Docker service is running
  systemd:
    name: docker
    state: started
    enabled: true
  tags: [docker]

- name: Create dockremap user for user namespace remapping
  user:
    name: "{{ docker_userns_remap_user }}"
    system: true
    create_home: false
    shell: /usr/sbin/nologin
    comment: "Docker user namespace remapping user"
  when: docker_userns_remap_enabled | default(false)
  tags: [docker, user]

- name: Configure subuid for user namespace remapping
  lineinfile:
    path: /etc/subuid
    line: "{{ docker_userns_remap_user }}:100000:65536"
    create: true
    mode: '0644'
  when: docker_userns_remap_enabled | default(false)
  notify: restart docker
  tags: [docker, user]

- name: Configure subgid for user namespace remapping
  lineinfile:
    path: /etc/subgid
    line: "{{ docker_userns_remap_user }}:100000:65536"
    create: true
    mode: '0644'
  when: docker_userns_remap_enabled | default(false)
  notify: restart docker
  tags: [docker, user]

- name: Add users to docker group
  user:
    name: "{{ item }}"
    groups: docker
    append: true
  loop: "{{ docker_users }}"
  when: docker_users is defined
  tags: [docker, user]

- name: Configure Docker daemon
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'
  notify: restart docker
  tags: [docker, config]

- name: Test Docker installation
  command: docker run --rm hello-world
  register: docker_test
  changed_when: false
  failed_when: docker_test.rc != 0
  become_user: "{{ gryt_user }}"
  tags: [docker, test]

- name: Pull Gryt Docker image
  docker_image:
    name: "{{ gryt_docker_image }}"
    source: pull
  become_user: "{{ gryt_user }}"
  tags: [docker, image]
  when: gryt_docker_image is defined

- name: Create Docker cleanup script
  template:
    src: docker-cleanup.sh.j2
    dest: /usr/local/bin/docker-cleanup.sh
    owner: root
    group: root
    mode: '0755'
  when: docker_cleanup_enabled | default(false)
  tags: [docker, cleanup]

- name: Schedule Docker cleanup cron job
  cron:
    name: "Docker system cleanup"
    user: "{{ gryt_user }}"
    minute: "{{ docker_cleanup_schedule.split()[0] }}"
    hour: "{{ docker_cleanup_schedule.split()[1] }}"
    day: "{{ docker_cleanup_schedule.split()[2] }}"
    month: "{{ docker_cleanup_schedule.split()[3] }}"
    weekday: "{{ docker_cleanup_schedule.split()[4] }}"
    job: "/usr/local/bin/docker-cleanup.sh >> /var/log/docker-cleanup.log 2>&1"
    state: present
  when: docker_cleanup_enabled | default(false)
  tags: [docker, cleanup, cron]
